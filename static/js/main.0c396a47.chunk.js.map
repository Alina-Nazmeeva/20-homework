{"version":3,"sources":["img/Milka.jpg","img/Murka.jpg","img/Bikini.jpg","img/likes.png","img/comments.png","img/reposts.png","img/share.png","img/BikiniPost.jpg","img/MilkaPost1.jpg","img/MilkaPost2.jpg","img/MurkaPost1.jpg","img/MurkaPost2.jpg","img/Cutie.JPG","components/Posts/PostForm.js","redux/actions.js","redux/types.js","components/Posts/Post.js","components/Posts/Posts.js","App.js","serviceWorker.js","redux/reducers/postsReducer.js","redux/reducers/authorsReducer.js","redux/store/index.js","index.js"],"names":["module","exports","PostForm","state","content","photo","authorName","handleChange","event","setState","target","id","value","submit","trim","newPost","author","props","authors","find","Object","values","date","Date","toLocaleDateString","day","month","likes","comments","reposts","liked","commented","reposted","console","log","createPost","className","this","onChange","placeholder","type","name","map","index","key","onClick","Component","mapDispatch","post","payload","connect","toggleLike","toggleComment","toggleRepost","toggle","currentTarget","style","backgroundImage","avatar","nickname","src","LikeIcon","alt","fontWeight","CommentsIcon","RepostsIcon","ShareIcon","posts","App","Boolean","window","location","hostname","match","initialState","Bikini","BikiniPost","Milka","MilkaPost1","MilkaPost2","Murka","MurkaPost1","MurkaPost2","Cutie","store","createStore","combineReducers","action","item","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0c396a47.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Milka.f1723475.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Murka.b9dc0917.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Bikini.0eb9f4cb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/likes.f375abe3.png\";","module.exports = __webpack_public_path__ + \"static/media/comments.c5cf7cd0.png\";","module.exports = __webpack_public_path__ + \"static/media/reposts.80bfdd98.png\";","module.exports = __webpack_public_path__ + \"static/media/share.5dec6e9e.png\";","module.exports = __webpack_public_path__ + \"static/media/BikiniPost.f4c90763.jpg\";","module.exports = __webpack_public_path__ + \"static/media/MilkaPost1.5c2d8dbe.jpg\";","module.exports = __webpack_public_path__ + \"static/media/MilkaPost2.84b8e246.jpg\";","module.exports = __webpack_public_path__ + \"static/media/MurkaPost1.938f3236.jpg\";","module.exports = __webpack_public_path__ + \"static/media/MurkaPost2.bf221a27.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Cutie.faee0305.JPG\";","import React, { Component } from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {createPost} from \"../../redux/actions\";\r\n\r\nclass PostForm extends Component{\r\n    state = {\r\n        content: \"\",\r\n        photo: \"https://elephant-travel.com.ua/userfiles/%D1%82%D0%B0%D0%B8%D1%82%D0%B82.jpg\",\r\n        authorName: \"Bikini\"\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.id]: event.target.value\r\n        })\r\n    }\r\n    \r\n    submit = () => {\r\n        const {content, photo, authorName} = this.state;\r\n        if(!content.trim() && !photo.trim()){\r\n            return;\r\n        }\r\n        const authorObject = this.props.authors.find((author) => {\r\n            return Object.values(author).find((value) => {\r\n                return value === authorName\r\n            })\r\n        })\r\n        const date = new Date();\r\n        const options = {\r\n            day: \"numeric\",\r\n            month: \"short\"\r\n        }\r\n        const newPost = {\r\n            author: authorObject,\r\n            content, \r\n            photo, \r\n            date: date.toLocaleDateString('en-US', options),\r\n            likes: 0,\r\n            comments: 0,\r\n            reposts: 0,\r\n            liked: false,\r\n            commented: false,\r\n            reposted: false\r\n        }\r\n        console.log(newPost);\r\n        this.props.createPost(newPost);\r\n        this.setState({\r\n            content: \"\",\r\n            photo: \"\"\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"form-wrapper\">\r\n                <h3>Create Post</h3>\r\n                <textarea id=\"content\" value={this.state.content} onChange={this.handleChange} placeholder=\"What's new?\"/>\r\n                <label>\r\n                    <span>Picture URL:</span>\r\n                    <input type=\"text\" id=\"photo\" value={this.state.photo} onChange={this.handleChange} />\r\n                </label>                \r\n                <label>\r\n                    <span>Choose an author:</span>\r\n                    <select name=\"authors\" id=\"authorName\" value={this.state.authorName} onChange={this.handleChange} >\r\n                        {this.props.authors.map((author, index) => {\r\n                            return <option value={author.name} key={index}>{author.name}</option>\r\n                        })}\r\n                    </select>\r\n                </label> \r\n                <button onClick={this.submit}>Create</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapState = (state) => {\r\n    return {\r\n        authors: state.authors.authors\r\n    }\r\n}\r\n\r\nconst mapDispatch = {\r\n    createPost\r\n}\r\n\r\nexport default connect(mapState, mapDispatch)(PostForm);","import { CREATE_POST, TOGGLE_LIKE, TOGGLE_COMMENT, TOGGLE_REPOST } from \"./types\";\r\n\r\nexport function createPost(post){\r\n    return {\r\n        type: CREATE_POST,\r\n        payload: post\r\n    }\r\n}\r\n\r\nexport function toggleLike(liked, likes, id){\r\n    return {\r\n        type: TOGGLE_LIKE,\r\n        liked: !liked,\r\n        likes: liked ? likes - 1 : likes + 1,\r\n        id: id\r\n    }\r\n}\r\nexport function toggleComment(commented, comments, id){\r\n    return {\r\n        type: TOGGLE_COMMENT,\r\n        commented: !commented,\r\n        comments: commented ? comments - 1 : comments + 1,\r\n        id: id\r\n    }\r\n}\r\nexport function toggleRepost(reposted, reposts, id){\r\n    return {\r\n        type: TOGGLE_REPOST,\r\n        reposted: !reposted,\r\n        reposts: reposted ? reposts - 1 : reposts + 1,\r\n        id: id\r\n    }\r\n}","export const CREATE_POST = \"CREATE_POST\";\r\nexport const TOGGLE_LIKE = \"TOGGLE_LIKE\";\r\nexport const TOGGLE_COMMENT = \"TOGGLE_COMMENT\";\r\nexport const TOGGLE_REPOST = \"TOGGLE_REPOST\";","import React from 'react';\r\nimport LikeIcon from \"../../img/likes.png\";\r\nimport CommentsIcon from \"../../img/comments.png\";\r\nimport RepostsIcon from \"../../img/reposts.png\";\r\nimport ShareIcon from \"../../img/share.png\";\r\nimport { connect } from 'react-redux';\r\nimport {toggleLike, toggleComment, toggleRepost} from \"../../redux/actions\";\r\n\r\nfunction Post(props){\r\n    const toggle = (event) => {\r\n        switch(event.currentTarget.id){\r\n            case \"like\":\r\n                props.toggleLike(props.liked, props.likes, props.id);\r\n                break;\r\n            case \"comment\":\r\n                props.toggleComment(props.commented, props.comments, props.id);\r\n                break;\r\n            case \"share\":\r\n                props.toggleRepost(props.reposted, props.reposts, props.id);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"post\">\r\n            <div className=\"post-header\">\r\n                <div className=\"avatar\" style={{backgroundImage: `url(${props.author.avatar})`}}></div>\r\n                <div className=\"post-text\">\r\n                    <p><strong className=\"name\">{props.author.name}</strong><span>{props.author.nickname} • {props.date}</span></p>\r\n                    <p className=\"post-content\">{props.content}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"photo\" style={{backgroundImage: `url(${props.photo})`}}></div>\r\n            <div className=\"post-footer\">\r\n                <div className=\"buttons\" id=\"like\" onClick={toggle}>\r\n                    <img className=\"icon\" src={LikeIcon} alt=\"like\" />\r\n                    <span style={{fontWeight: `${props.liked ? \"700\" : \"400\"}`}}>{props.likes}</span>\r\n                </div>\r\n                <div className=\"buttons\" id=\"comment\" onClick={toggle}>\r\n                    <img className=\"icon\" src={CommentsIcon} alt=\"comment\"/>\r\n                    <span style={{fontWeight: `${props.commented ? \"700\" : \"400\"}`}}>{props.comments}</span>\r\n                </div>\r\n                <div className=\"buttons\">\r\n                    <img className=\"icon\" src={RepostsIcon} alt=\"repost\"/>\r\n                    <span style={{fontWeight: `${props.reposted ? \"700\" : \"400\"}`}}>{props.reposts}</span>\r\n                </div>\r\n                <div className=\"buttons\" id=\"share\" onClick={toggle}>\r\n                    <img className=\"icon\" src={ShareIcon} alt=\"share\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatch = {\r\n    toggleLike, toggleComment, toggleRepost\r\n}\r\n\r\nexport default connect(null, mapDispatch)(Post);","import React from \"react\";\r\nimport './Posts.css';\r\nimport Post from \"./Post\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Posts = ({posts}) => {\r\n    return(\r\n        <div>\r\n            {posts.map((post, index) => {\r\n                return <Post {...post} key={index} id={index} />\r\n            })}\r\n        </div>\r\n    )   \r\n}\r\n\r\nconst mapState = (state) => {\r\n    return {\r\n        posts: state.posts.posts\r\n    }\r\n}\r\n\r\nexport default connect(mapState, null)(Posts);","import React from 'react';\nimport './App.css';\nimport PostForm from './components/Posts/PostForm';\nimport Posts from './components/Posts/Posts';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <PostForm />\n        <Posts />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CREATE_POST, TOGGLE_LIKE, TOGGLE_COMMENT, TOGGLE_REPOST } from \"../types\";\r\nimport Bikini from \"../../img/Bikini.jpg\";\r\nimport BikiniPost from \"../../img/BikiniPost.jpg\";\r\nimport Milka from \"../../img/Milka.jpg\";\r\nimport MilkaPost1 from \"../../img/MilkaPost1.jpg\";\r\nimport MilkaPost2 from \"../../img/MilkaPost2.jpg\";\r\nimport Murka from \"../../img/Murka.jpg\";\r\nimport MurkaPost1 from \"../../img/MurkaPost1.jpg\";\r\nimport MurkaPost2 from \"../../img/MurkaPost2.jpg\";\r\n\r\nconst initialState = {\r\n    posts: [{\r\n        author: {\r\n          name: \"Bikini\",\r\n          avatar: Bikini,\r\n          nickname: \"@bikinyator\"\r\n        },\r\n        content: \"My sister and me\",\r\n        photo: BikiniPost,\r\n        date: \"Sep 26\",\r\n        likes: 444,\r\n        comments: 22,\r\n        reposts: 2,\r\n        liked: false,\r\n        commented: false,\r\n        reposted: false\r\n      }, {\r\n        author: {\r\n            name: \"Milka\",\r\n            avatar: Milka,\r\n            nickname: \"@milkyway\"\r\n          },\r\n          content: \"Human bought me new toy!\",\r\n          photo: MilkaPost1,\r\n          date: \"Sep 24\",\r\n          likes: 598,\r\n          comments: 25,\r\n          reposts: 3,\r\n          liked: false,\r\n          commented: false,\r\n          reposted: false\r\n      }, {\r\n        author: {\r\n            name: \"Milka\",\r\n            avatar: Milka,\r\n            nickname: \"@milkyway\"\r\n          },\r\n          content: \"My kids\",\r\n          photo: MilkaPost2,\r\n          date: \"Sep 14\",\r\n          likes: 564,\r\n          comments: 28,\r\n          reposts: 3,\r\n          liked: false,\r\n          commented: false,\r\n          reposted: false\r\n      }, {\r\n        author: {\r\n          name: \"Murka\",\r\n          avatar: Murka,\r\n          nickname: \"@murembo\"\r\n        },\r\n        content: \"Do NOT step outside your comfort zone\",\r\n        photo: MurkaPost1,\r\n        date: \"Sep 12\",\r\n        likes: 546,\r\n        comments: 18,\r\n        reposts: 6,\r\n        liked: false,\r\n        commented: false,\r\n        reposted: false\r\n      }, {\r\n        author: {\r\n          name: \"Murka\",\r\n          avatar: Murka,\r\n          nickname: \"@murembo\"\r\n        },\r\n        content: \"Yes, I've eaten your food. No, I'm not sorry\",\r\n        photo: MurkaPost2,\r\n        date: \"Sep 10\",\r\n        likes: 666,\r\n        comments: 24,\r\n        reposts: 2,\r\n        liked: false,\r\n        commented: false,\r\n        reposted: false\r\n      }\r\n    ]\r\n}\r\n\r\nexport const postsReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case CREATE_POST: {\r\n            return {...state, posts: [action.payload, ...state.posts]}\r\n        }\r\n        case TOGGLE_LIKE: {\r\n            return {...state, posts : [...state.posts].map((item, index) => {\r\n                if(index === action.id){\r\n                    return {...item, liked: action.liked, likes: action.likes}\r\n                } else return item;\r\n            })}\r\n        }\r\n        case TOGGLE_COMMENT: {\r\n            return {...state, posts : [...state.posts].map((item, index) => {\r\n                if(index === action.id){\r\n                    return {...item, commented: action.commented, comments: action.comments}\r\n                } else return item;\r\n            })}\r\n        }\r\n        case TOGGLE_REPOST: {\r\n            return {...state, posts : [...state.posts].map((item, index) => {\r\n                if(index === action.id){\r\n                    return {...item, reposted: action.reposted, reposts: action.reposts}\r\n                } else return item;\r\n            })}\r\n        }\r\n        default: return state;\r\n    }\r\n}","import Bikini from \"../../img/Bikini.jpg\";\r\nimport Milka from \"../../img/Milka.jpg\";\r\nimport Murka from \"../../img/Murka.jpg\";\r\nimport Cutie from \"../../img/Cutie.JPG\";\r\n\r\nconst initialState = {\r\n    authors: [{\r\n        name: \"Bikini\",\r\n        avatar: Bikini,\r\n        nickname: \"@bikinyator\"\r\n    }, {\r\n        name: \"Milka\",\r\n        avatar: Milka,\r\n        nickname: \"@milkyway\"\r\n    }, {\r\n        name: \"Murka\",\r\n        avatar: Murka,\r\n        nickname: \"@murembo\"\r\n    }, {\r\n        name: \"Cutie\",\r\n        avatar: Cutie,\r\n        nickname: \"@beast\"\r\n    }]\r\n}\r\n\r\nexport const authorsReducer = (state = initialState) => {\r\n    return state;\r\n}","import {createStore, combineReducers} from \"redux\";\r\nimport {postsReducer} from \"../reducers/postsReducer\";\r\nimport {authorsReducer} from \"../reducers/authorsReducer\";\r\n\r\nconst store = createStore(combineReducers({\r\n    posts: postsReducer,\r\n    authors: authorsReducer\r\n}));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}